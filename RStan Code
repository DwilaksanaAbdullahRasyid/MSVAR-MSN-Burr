library(rstan)
library(rstantools)
library(ggplot2)
library(StanHeaders)
library(loo)
library(tseries)
library(MSwM)
library(ggdist)
library(gridExtra)
library(ggExtra)
library(TeachingDemos)
library(openxlsx)
library(imputeTS)

# Generate 100 observations from a normal distribution for two variables
T <- 1000
xx <- rnorm(T, mean = 5, sd = 2)  # Adjust mean and sd as needed
yy <- rnorm(T, mean = 10, sd = 3)
x_data = read.table("D:\\....txt",header = TRUE,sep=" ")
y_data = read.table("D:\\....txt",header = TRUE,sep=" ")
x <- as.numeric(x_data$no)  # Replace 'no' with your actual column name
y <- as.numeric(y_data$no)

# Prepare the data list for Stan
data_list <- list(
  T = T,
  x <- x,
  y <- y
)
# Verify their structure
print(str(x))  # Should show 'num [1:T]'
print(str(y))  # Should show 'num [1:T]'

# Stan code for the bivariate MSAR MSN Burr model (same as previously modified)
MSVAR_MSNBurr <- '
/// Full Stan code for bivariate MSVAR MSN Burr model

functions {
  real msnburr_bivariate(real x, real y, real alpha_x, real sigma_x, real mu_x, real alpha_y, real sigma_y, real mu_y) {
    real k_x = 1 / sqrt(2 * pi()) * (1 + 1 / alpha_x)^(alpha_x + 1);
    real k_y = 1 / sqrt(2 * pi()) * (1 + 1 / alpha_y)^(alpha_y + 1);
    real bx = log(k_x / sigma_x * exp(-k_x * (x - mu_x) / sigma_x) * (1 + exp(-k_x * (x - mu_x) / sigma_x) / alpha_x) ^ (-(alpha_x + 1)));
    real by = log(k_y / sigma_y * exp(-k_y * (y - mu_y) / sigma_y) * (1 + exp(-k_y * (y - mu_y) / sigma_y) / alpha_y) ^ (-(alpha_y + 1)));
    return bx + by; // Log-probability of the bivariate distribution
  }
}

data {
  int T;
  vector [T] x; // Independent variable x
  vector [T] y; // Independent variable y
}

parameters {
  vector<lower = 0, upper = 1>[2] p;
  real <lower=0.9, upper=1.2> alpha1_x;
  real <lower=11.5, upper=20> alpha2_x;
  real <lower=0.9, upper=1.2> alpha1_y;
  real <lower=11.5, upper=20> alpha2_y;
  vector<lower=4, upper=30>[2] sigma_x;
  vector<lower=4, upper=30>[2] sigma_y;
  vector[2] beta_0_x;
  vector[2] beta_0_y;
  real <lower=0.7, upper=1> beta_11_x;
  real <lower=0.7, upper=1> beta_12_x;
  real <lower=0.7, upper=1> beta_11_y;
  real <lower=0.7, upper=1> beta_12_y;
  real <lower=0, upper=1> xi1_init;
  real x_tm1_init;
  real y_tm1_init;
  real x_tm2_init;
  real y_tm2_init;
}

transformed parameters {
  matrix[T, 2] eta;
  matrix[T, 2] xi;
  vector[T] f;
  vector[T] regime;

  for (t in 1:T) {
    if (t == 1) {
      eta[t, 1] = exp(msnburr_bivariate(x[t], y[t], alpha1_x, sigma_x[1], beta_0_x[1] + beta_11_x * x_tm1_init, alpha1_y, sigma_y[1], beta_0_y[1] + beta_11_y * y_tm1_init));
      eta[t, 2] = exp(msnburr_bivariate(x[t], y[t], alpha2_x, sigma_x[2], beta_0_x[2] + beta_12_x * x_tm2_init, alpha2_y, sigma_y[2], beta_0_y[2] + beta_12_y * y_tm2_init));
    } else {
      eta[t, 1] = exp(msnburr_bivariate(x[t], y[t], alpha1_x, sigma_x[1], beta_0_x[1] + beta_11_x * x[t - 1], alpha1_y, sigma_y[1], beta_0_y[1] + beta_11_y * y[t - 1]));
      eta[t, 2] = exp(msnburr_bivariate(x[t], y[t], alpha2_x, sigma_x[2], beta_0_x[2] + beta_12_x * x[t - 1], alpha2_y, sigma_y[2], beta_0_y[2] + beta_12_y * y[t - 1]));
    }
  }

  // Calculate transition probabilities for xi and f
  for (t in 1:T) {
    if (t == 1) {
      f[t] = p[1] * xi1_init * eta[t, 1] + (1 - p[1]) * xi1_init * eta[t, 2] + p[2] * (1 - xi1_init) * eta[t, 2] + (1 - p[2]) * (1 - xi1_init) * eta[t, 1];
      xi[t, 1] = (p[1] * xi1_init * eta[t, 1] + (1 - p[2]) * (1 - xi1_init) * eta[t, 1]) / f[t];
      xi[t, 2] = 1.0 - xi[t, 1];
    } else {
      f[t] = p[1] * xi[t - 1, 1] * eta[t, 1] + (1 - p[1]) * xi[t - 1, 1] * eta[t, 2] + p[2] * xi[t - 1, 2] * eta[t, 2] + (1 - p[2]) * xi[t - 1, 2] * eta[t, 1];
      xi[t, 1] = (p[1] * xi[t - 1, 1] * eta[t, 1] + (1 - p[2]) * xi[t - 1, 2] * eta[t, 1]) / f[t];
      xi[t, 2] = 1.0 - xi[t, 1];
    }
    regime[t] = (xi[t, 1] > xi[t, 2]) ? 1 : 2;
  }
}

model {
  // Priors
  p ~ normal(0.7, 0.05);
  beta_0_x ~ normal(0, 1);
  beta_0_y ~ normal(0, 1);
  beta_11_x ~ normal(0.9, 0.2);
  beta_12_x ~ normal(0.9, 0.2);
  beta_11_y ~ normal(0.9, 0.2);
  beta_12_y ~ normal(0.9, 0.2);
  sigma_x ~ normal(5, 1);
  sigma_y ~ normal(5, 1);
  alpha1_x ~ normal(0, 0.5);
  alpha2_x ~ normal(0, 0.5);
  alpha1_y ~ normal(0, 0.5);
  alpha2_y ~ normal(0, 0.5);
  xi1_init ~ beta(1, 2);
  x_tm1_init ~ normal(1, 0.1);
  y_tm1_init ~ normal(1, 0.1);
  x_tm2_init ~ normal(1, 0.1);
  y_tm2_init ~ normal(1, 0.1);

  // Likelihood calculation based on the combined densities in f
  target += sum(log(f));
}

'

# Compile the model
stan_model <- stan_model(model_code = MSVAR_MSNBurr)

# Fit the model
fit <- sampling(stan_model, data = data_list, iter = 1000, chains = 1)

# Print results
print(fit)

#PLOT PEMBAGIAN REGIME YANG SUDAH KONVERGEN
regime_converge <- numeric(5000)
# Iterate from 1 to 5000
for (i in 1:5000) {
  # Access the specified object
  result <- fit@sim[["samples"]][[1]][[paste0("regime[", i, "]")]][100000]
  # Store the result in the results vector
  regime_converge[i] <- result
}

#==================
#plotting data time series per regime MSAR MSN BURR
y=y
x=1:length(y)
plot(x,y,type="l", ylab="EEG_T3", xlab="milisecond")
regime=as.ts(regime_converge)
#defining color of background
bg_color <- rgb(211/255, 211/255, 211/255, alpha = 0.6)  # Light red
# Finding the indices of values greater than a threshold (e.g., 7) for background color
threshold <- 1.1
highlight_indices <- which(regime < threshold) #regime 1
highlight_indices <- which(regime > threshold) #regime 2
# Adding rectangles for the highlighted regions
for (i in highlight_indices) {
  rect(xleft = x[i] - 0.5, xright = x[i] + 0.5, ybottom = min(y), ytop = max(y), col = bg_color, border = NA)
}
